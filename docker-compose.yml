services:
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8000:8000"
    depends_on:
      - trainer-service
      - predictor-service
    networks:
      - ml-net
    restart: on-failure

  trainer-service:
    build: ./trainer-service
    container_name: trainer-service
    ports:
      - "9001:9000"
    volumes:
      - ./models:/app/models
    networks:
      - ml-net
    restart: on-failure
    depends_on:
      - kafka
      - redis

  predictor-service:
    build: ./predictor-service
    container_name: predictor-service
    ports:
      - "9002:9000"
    volumes:
      - ./models:/app/models
    networks:
      - ml-net
    restart: on-failure
    depends_on:
      - kafka
      - redis
      
  redis:
    image: redis:8.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - ml-net
    restart: on-failure
  
  metrics-consumer:
    build: ./metrics-consumer
    container_name: metrics-consumer
    depends_on:
      - kafka
      - redis
    networks:
      - ml-net
    restart: on-failure

  
  kafka:
    image: bitnami/kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_ENABLE_KRAFT=true
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - ml-net
    restart: on-failure
    
networks:
  ml-net:
    driver: bridge