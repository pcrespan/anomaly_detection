services:
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      - trainer-service
      - predictor-service
    networks:
      - ml-net
    restart: on-failure

  trainer-service:
    build: ./trainer-service
    container_name: trainer-service
    ports:
      - "9001:9000"
    env_file:
    - .env
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./common:/app/common
    networks:
      - ml-net
    restart: on-failure
    depends_on:
      kafka-1:
        condition: service_healthy
      redis:
        condition: service_started

  predictor-service:
    build: ./predictor-service
    container_name: predictor-service
    ports:
      - "9002:9000"
    env_file:
    - .env
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./common:/app/common
    networks:
      - ml-net
    restart: on-failure
    depends_on:
      kafka-1:
        condition: service_healthy
      redis:
        condition: service_started
      
  redis:
    image: redis:8.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - ml-net
    restart: on-failure
  
  metrics-consumer-1:
    build: ./metrics-consumer
    env_file:
    - .env
    environment:
      - PYTHONPATH=/app
    depends_on:
      kafka-1:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./common:/app/common
    networks:
      - ml-net
    restart: on-failure

  metrics-consumer-2:
    build: ./metrics-consumer
    env_file:
    - .env
    environment:
      - PYTHONPATH=/app
    depends_on:
      kafka-1:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./common:/app/common
    networks:
      - ml-net
    restart: on-failure
  
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: training_data
    ports:
      - "5432:5432"
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ml-net

  training-data-consumer:
    build: ./training-data-consumer
    container_name: training-data-consumer
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
    depends_on:
      kafka-1:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./common:/app/common
    networks:
      - ml-net
    restart: on-failure
  
  kafka-1:
    image: bitnami/kafka:latest
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka-1:9092 --list || exit 1"]
      interval: 10s
      retries: 10
    container_name: kafka-1
    environment:
      - KAFKA_KRAFT_CLUSTER_ID=cluster-1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9093,2@kafka-2:9093
    ports:
      - "9092:9092"
    networks:
      - ml-net
    restart: on-failure

  kafka-2:
    image: bitnami/kafka:latest
    container_name: kafka-2
    environment:
      - KAFKA_KRAFT_CLUSTER_ID=cluster-1
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9093,2@kafka-2:9093
    networks:
      - ml-net
    restart: on-failure
    
networks:
  ml-net:
    driver: bridge

volumes:
  postgres_data: